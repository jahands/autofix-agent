FROM node:24 as base

# Install necessary packages while minimizing layers
# We combine commands with && and clean cache in the same layer
# to reduce the image size
RUN apt-get -y update

RUN apt-get install -y \
  curl \
  git \
  git-lfs \
  unzip \
  autoconf \
  build-essential \
  bzip2 \
  gnupg \
  jq \
  libffi-dev \
  libbz2-dev \
  libc++1 \
  libdb-dev \
  libgdbm-dev \
  libgdbm6 \
  libgbm1 \
  libgmp-dev \
  liblzma-dev \
  libncurses5-dev \
  libreadline-dev \
  libssl-dev \
  libvips-dev \
  libyaml-dev \
  tzdata \
  wget \
  zlib1g-dev \
  zstd \
  software-properties-common

RUN curl -fsSL https://get.docker.com -o get-docker.sh
RUN sh get-docker.sh

# Install pnpm in a separate layer for better caching
RUN npm install -g pnpm && \
    rm -rf /root/.npm

# Set up pnpm environment
ENV PNPM_HOME=/usr/local/bin
ENV PATH=$PNPM_HOME:$PATH

# Set working directory
WORKDIR /app

# Set environment variables
ENV PATH="/app/node_modules/.bin:${PATH}"

###
# STAGE: PRUNE -  Generate a partial monorepo for the sandbox-container app. The output will be placed into a directory named "out"
###
FROM base AS prune
WORKDIR /app
RUN pnpm install turbo --global
COPY . .
RUN turbo prune @repo/autofix

###
# STAGE: INSTALL & RUN
###
FROM base AS installer
WORKDIR /app

COPY --from=prune /app/out/ .
RUN pnpm install --frozen-lockfile --only=production

WORKDIR /app/apps/autofix

RUN mkdir -p workdir

# Expose the port your Node.js server will run on
EXPOSE 8080

CMD ["pnpm", "run", "start:container"]
